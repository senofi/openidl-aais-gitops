---
- name: Generate aws resource policy from template aws_resource_policy.json.j2
  template:
    src: templates/aws_resource_policy.json.j2
    dest: ./aws_resource_policy.json
    mode: 0755

- name: Create namespace
  k8s:
    state: present
    definition:
      api_version: v1
      kind: Namespace
      metadata:
        name: "{{ namespace }}"

- name: mongodb Helm chart repo
  shell: |
    helm repo add bitnami https://charts.bitnami.com/bitnami
    helm repo update
  tags:
    - mongodb
    - mongodb-helm
    - mongodb

- name: Install mongodb helm chart
  no_log: false
  shell: |
    helm --namespace {{ namespace }} upgrade --install {{ network.org_name }} bitnami/mongodb \
    --set architecture=replicaset \
    --set useStatefulSet=true \
    --set auth.enabled=true \
    --set auth.rootPassword="{{ mongodb_root_token }}" \
    --set auth.username="{{ mongodb_user }}" \
    --set auth.password="{{ mongodb_user_token }}" \
    --set auth.database="{{ mongodb_database }}" \
    --set persistence.enabled=true \
    --set persistence.size=20Gi \
    --set persistence.mountPath="/bitnami/mongodb" \
    --set persistence.storageClass="openidl-sc" \
    --set serviceAccount.create=true \
    --set serviceAccount.name="{{ network.org_name }}mongodbsvcuser" \
    --set externalAccess.enabled=false \
    --set externalAccess.service.type=ClusterIP \
    --set replicaSetHostnames=true \
    --set replicaCount=3 \
    --set tls.enabled=false \
    --set readinessProbe.enabled=false \
    --set arbiter.livenessProbe.enabled=false \
    --set global.namespaceOverride={{ namespace }}
  tags:
    - mongodb
    - mongodb-helm-repo

- name: Check mongodb-user secret exists
  shell : |
    export AWS_PROFILE=cicd-role
    aws secretsmanager list-secrets --filter Key="name",Values="{{ network.org_name }}-{{ env }}-mongodb-user" | jq .SecretList[0].Name
  register: mongodb_user_secret

- name: Create mongodb user in AWS secrets manager
  no_log: false
  shell: |
    export AWS_PROFILE=cicd-role
    aws secretsmanager create-secret --name {{ network.org_name }}-{{ env }}-mongodb-user --description "Mongodb User Name" --secret-string {{ mongodb_user }}
  when: mongodb_user_secret.stdout == "null"

- name: Update mongodb user in AWS secrets manager
  no_log: false
  shell: |
    export AWS_PROFILE=cicd-role
    aws secretsmanager update-secret --secret-id {{ network.org_name }}-{{ env }}-mongodb-user --secret-string {{ mongodb_user }}
  when: mongodb_user_secret.stdout != "null"

- name: Check mongodb-user-token secret exists
  shell : |
    export AWS_PROFILE=cicd-role
    aws secretsmanager list-secrets --filter Key="name",Values="{{ network.org_name }}-{{ env }}-mongodb-user-token" | jq .SecretList[0].Name
  register: mongodb_user_token_secret

- name: Create mongodb user token in AWS secrets manager
  no_log: false
  shell: |
    export AWS_PROFILE=cicd-role; aws secretsmanager create-secret --name {{ network.org_name }}-{{ env }}-mongodb-user-token --description "Mongodb User Token" --secret-string {{ mongodb_user_token }}
  when: mongodb_user_token_secret.stdout == "null"

- name: Update mongodb user token in AWS secrets manager
  no_log: false
  shell: |
    export AWS_PROFILE=cicd-role; aws secretsmanager update-secret --secret-id {{ network.org_name }}-{{ env }}-mongodb-user-token --secret-string {{ mongodb_user_token }}
  when: mongodb_user_token_secret.stdout != "null"

- name: Check mongodb-root-token secret exists
  shell : |
    export AWS_PROFILE=cicd-role
    aws secretsmanager list-secrets --filter Key="name",Values="{{ network.org_name }}-{{ env }}-mongodb-root-token" | jq .SecretList[0].Name
  register: mongodb_root_token_secret

- name: Create mongodb root token in AWS secrets manager
  no_log: false
  shell: |
    export AWS_PROFILE=cicd-role
    aws secretsmanager create-secret --name {{ network.org_name }}-{{ env }}-mongodb-root-token --description "Mongodb root token" --secret-string {{ mongodb_root_token }}
  when: mongodb_root_token_secret.stdout == "null"

- name: Update mongodb root token in AWS secrets manager
  no_log: false
  shell: |
    export AWS_PROFILE=cicd-role
    aws secretsmanager update-secret --secret-id {{ network.org_name }}-{{ env }}-mongodb-root-token --secret-string {{ mongodb_root_token }}
  when: mongodb_root_token_secret.stdout != "null"

- name: Add resource policy to the secret created {{ item }}
  shell: |
    export AWS_PROFILE=cicd-role
    aws secretsmanager put-resource-policy --secret-id {{ item }} --resource-policy file://aws_resource_policy.json --region {{ aws_region }} --block-public-policy
  with_items:
  - "{{ network.org_name }}-{{ env }}-mongodb-user-token"
  - "{{ network.org_name }}-{{ env }}-mongodb-root-token"
  - "{{ network.org_name }}-{{ env }}-mongodb-user"

- name: Delete aws resource policy file
  file:
    state: absent
    path: ./aws_resources_policy.json
